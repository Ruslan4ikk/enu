import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.utils.executor import start_polling
from bot_sections_logic import main_menu, services_menu, interactive_menu, settings_menu, extras_menu
from platonus_webview import open_platonus
import google.generativeai as genai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_API_KEY = "7249084291:AAHtZKO4oj5m81fR9F-ey_KPGRjBNI_rMUo"
GEMINI_API_KEY = "AIzaSyA443fdvjgwe4qoTosJDUqapzAp30qWL_Y"
ADMIN_ID = 568010963
DATA_FILE = 'data.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_API_KEY, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

genai.configure(api_key=GEMINI_API_KEY)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def load_chat_history(user_id):
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data.get(str(user_id), [])
    return []

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def save_chat_history(user_id, message):
    data = {}
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
    
    user_history = data.get(str(user_id), [])
    user_history.append(message)
    data[str(user_id)] = user_history[-20:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –ø–∞–º—è—Ç–∏
def generate_gemini_response(user_id, user_message):
    try:
        history = load_chat_history(user_id)
        context = "\n".join(history)
        
        system_message = (
            "–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ï–≤—Ä–∞–∑–∏–π—Å–∫–æ–≥–æ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ (–ï–ù–£). "
            "–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ, –ª–æ–≥–∏—á–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. "
            "–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π. "
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏: " + context
        )

        model = genai.GenerativeModel("gemini-1.5-pro")
        response = model.generate_content(f"{system_message}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–û—Ç–≤–µ—Ç:")
        
        save_chat_history(user_id, user_message)
        save_chat_history(user_id, response.text)
        
        return response.text.replace('*', '').replace('**', '')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
@dp.message_handler(commands=['menu'])
async def cmd_menu(message: types.Message):
    await message.reply("üìå <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu(), parse_mode=types.ParseMode.HTML)

@dp.message_handler(lambda message: message.text == "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
async def show_services_menu(message: types.Message):
    await message.reply("üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å:", reply_markup=services_menu(), parse_mode=types.ParseMode.HTML)

@dp.message_handler(lambda message: message.text == "üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
async def show_interactive_menu(message: types.Message):
    await message.reply("üéØ <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=interactive_menu(), parse_mode=types.ParseMode.HTML)

@dp.message_handler(lambda message: message.text == "‚öô –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_menu(message: types.Message):
    await message.reply("‚öô <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=settings_menu(), parse_mode=types.ParseMode.HTML)

@dp.message_handler(lambda message: message.text == "üì¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
async def show_extras_menu(message: types.Message):
    await message.reply("üì¢ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=extras_menu(), parse_mode=types.ParseMode.HTML)

@dp.message_handler(lambda message: message.text == "üîë Platonus")
async def open_platonus_menu(message: types.Message):
    await open_platonus(message)

@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.reply("üìå <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu(), parse_mode=types.ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–º—è—Ç—å—é
@dp.message_handler()
async def handle_messages(message: types.Message):
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    gemini_response = generate_gemini_response(message.from_user.id, message.text)
    await message.reply(gemini_response, parse_mode=types.ParseMode.HTML)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    start_polling(dp, skip_updates=True)
